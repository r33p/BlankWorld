#N canvas 358 115 977 733 10;
#X declare -lib aubio;
#X obj 182 173 bonk~;
#X obj 182 119 adc~;
#X obj 564 74 declare -lib aubio;
#X obj 204 202 print;
#N canvas 302 210 1094 689 bonk 0;
#X msg 484 293 bang;
#X msg 483 357 print;
#X text 5 285 In this patch \, after starting DSP \, you can print
out the raw or cooked output using the two "spigots" or listen to a
synthesizer output by raising its volume.;
#X msg 483 138 mask 4 0.7;
#X text 578 120 Describes how energy in each frequency band masks later
energy in the band. Here the masking is total for 4 analysis periods
and then drops by 0.7 each period.;
#X text 528 286 Poll the current spectrum via "raw" outlet \, You can
set a very high threshold if you don't want attacks mixed in.;
#X text 561 331 turn debugging on or off.;
#X text 560 202 Minimum "velocity" to output (quieter notes are ignored.)
;
#X text 8 145 Bonk's two outputs are the raw spectrum of the attack
(provided as a list of 11 numbers giving the signal "loudness" in the
11 frequency bands used) \, and the "cooked" output which gives only
an instrument number (counting up from zero) and a "velocity". This
"velocity" is the sum of the square roots of the amplitudes of the
bands \, normalized so that 100 is an attack of amplitude of about
1 The instrument number is significant only if Bonk has a "template
set" in memory.;
#X text 580 35 Set low and high thresholds. Signal growth must exceed
the high one and then fall to the low one to make an attack. The unit
is the sum of the proportional growth in the 11 filter bands. Proportional
growth is essentially the logarithmic time derivative.;
#X msg 483 384 print 1;
#X text 551 386 print out filterbank settings;
#X text 9 33 The Bonk object takes an audio signal input and looks
for "attacks" defined as sharp changes in the spectral envelope of
the incoming sound. Optionally \, and less reliably \, you can have
Bonk check the attack against a collection of stored templates to try
to guess which of two or more instruments was hit. Bonk is described
theoretically in the 1998 ICMC proceedings \, reprinted on crca.ucsd.edu/~msp
.;
#N canvas 2 52 699 717 creation-arguments 0;
#X text 228 14 creation arguments for bonk~;
#X text 70 272 -npts 256;
#X text 44 244 default value:;
#X text 70 308 -hop 128;
#X text 70 342 -nfilters 11;
#X text 68 380 -halftones 6;
#X text 76 514 -overlap 1;
#X text 79 567 -firstbin 1;
#X text 71 454 -minbandwidth 1.5;
#X text 122 147 All frequency parameters are specified in 'bins'. One
bin is the sample rate divided by the window size. The minimum possible
bandwidth is 1.5 bins. Higher bandwidths give numerically more robust
outputs.;
#X text 43 229 Arguments and;
#X text 212 270 window size in points;
#X text 210 306 analysis period ("hop size") in points;
#X text 212 340 number of filters to use;
#X text 212 379 desired bandwidth of filters in halftones \, effective
in the exponentially spaced region. (At lower center frequencies the
bandwidth is supported by the "minbandwidth" parameter below).;
#X text 212 511 overlap factor between filters. If 1 \, the filters
are spaced to line up at their half-power points. Other values specify
more or fewer filters proportionally.;
#X text 121 49 bonk~ uses a filterbank whose center frequencies are
spaced equally at low frequencies and proportionally at high ones -
i.e. \, they increase linearly \, then exponentially. They are determined
by the filters' bandwidths and overlap. The bandwidths are specified
proportionally to frequency but bounded below by a specified minimum.
;
#X text 210 455 minimum bandwidth in bins. If the bandwidth specified
by "halftones" is smaller than this \, this value is used. This must
be at least 1.5.;
#X text 212 567 center frequency \, in bins \, of the lowest filter.
The others are computed from this.;
#X restore 147 414 pd creation-arguments;
#N canvas 658 182 579 589 templates 0;
#X msg 76 197 learn 0;
#X msg 76 227 forget;
#X msg 76 257 write templates.txt;
#X msg 76 287 read templates.txt;
#X msg 76 107 debounce 0;
#X msg 76 137 learn 10;
#X obj 62 431 outlet;
#X text 155 133 Forget all templates and start learning new ones. The
argument gives the number of times you will hit each instrument (10
recommended.) Turn on the output volume above for audible feedback
as you train Bonk. "Learn 0" exits learn mode.;
#X text 155 217 Forget the last template. In Learn mode \, use "forget"
to erase and record over a template.;
#X text 220 253 Write templates to a file in text-editable format.
;
#X text 221 283 Read templates from a file.;
#X text 157 104 Minimum time (msec) between attacks in learn mode;
#X connect 0 0 6 0;
#X connect 1 0 6 0;
#X connect 2 0 6 0;
#X connect 3 0 6 0;
#X connect 4 0 6 0;
#X connect 5 0 6 0;
#X restore 500 421 pd templates;
#X msg 483 173 attack-frames 1;
#X text 608 174 number of frames over which to measure growth;
#X text 605 422 more messages for managing templates;
#X msg 483 201 minvel 7;
#X msg 483 228 spew 0;
#X text 550 230 Turn spew mode on/off;
#X text 597 254 experimental: use alternative loudness units;
#X text 212 9 BONK~ - attack detection and spectral envelope measurement
;
#X text 5 344 By default bonk's analysis is carried out on a 256-point
window (6 msec at 44.1 kHz) and the analysis period is 128 samples.
These and other parameters may be overridden using creation arguments
as shown in the subpatch below:;
#X text 552 356 Print out settings and templates.;
#X obj 483 454 t a;
#X obj 482 497 outlet;
#X floatatom 519 32 5 0 0 0 - - -, f 5;
#X msg 483 68 thresh \$1 5;
#X msg 483 95 thresh 2.5 5;
#X floatatom 670 453 5 0 0 0 - - -, f 5;
#X obj 681 493 pack f f;
#X msg 665 521 thresh \$1 \$2;
#X floatatom 757 439 5 0 0 0 - - -, f 5;
#X obj 717 463 b;
#X msg 483 255 useloudness 0;
#X msg 572 564 attack-frames \$1;
#X floatatom 574 519 5 0 0 0 - - -, f 5;
#X msg 483 331 debug 0;
#X floatatom 348 427 5 0 0 0 - - -, f 5;
#X msg 336 469 minvel \$1;
#X obj 340 526;
#X connect 0 0 25 0;
#X connect 1 0 25 0;
#X connect 3 0 25 0;
#X connect 10 0 25 0;
#X connect 14 0 25 0;
#X connect 15 0 25 0;
#X connect 18 0 25 0;
#X connect 19 0 25 0;
#X connect 25 0 26 0;
#X connect 27 0 28 0;
#X connect 28 0 25 0;
#X connect 29 0 25 0;
#X connect 30 0 31 0;
#X connect 31 0 32 0;
#X connect 32 0 25 0;
#X connect 33 0 31 1;
#X connect 33 0 34 0;
#X connect 34 0 31 0;
#X connect 35 0 25 0;
#X connect 36 0 25 0;
#X connect 37 0 36 0;
#X connect 38 0 25 0;
#X connect 39 0 40 0;
#X connect 40 0 25 0;
#X restore 70 119 pd bonk help;
#X obj 603 494 adc~;
#X floatatom 705 503 5 0 0 0 - - -, f 5;
#X obj 603 526 aubiotempo~ 0.3;
#X obj 603 549 bng 15 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X obj 564 612 circle;
#X obj 603 590 line;
#X obj 564 644 colorRGB 0 0 0 1;
#X obj 564 666 translateXYZ 0 0 0.05;
#X obj 564 465 colorRGB 1 1 1 1;
#X obj 564 687 circle 1.45;
#X obj 705 368 vsl 15 128 0 10 0 0 empty empty empty 0 -9 0 10 -262144
-1 -1 0 1;
#X obj 205 61 gemwin;
#X msg 212 37 0 \, destroy;
#X msg 205 16 frame 60 \, dimen 400 400 \, create \, 1;
#X msg 603 568 2.2 \, 1.4 400;
#X obj 730 143 adc~;
#X obj 730 188 bng 15 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X obj 730 167 aubioonset~ 0.3;
#X floatatom 832 152 5 0 0 0 - - -, f 5;
#X obj 730 230 line;
#X obj 564 137 gemhead;
#X obj 832 21 vsl 15 128 0 10 0 0 empty empty empty 0 -9 0 10 -262144
-1 -1 0 1;
#X obj 564 97 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 564 285 colorRGB 0 0 0 1;
#X obj 564 356 circle 0.7;
#X obj 564 304 translateXYZ 0 0 0.05;
#X obj 564 266 circle 4;
#X obj 564 397 circle 0.7;
#X msg 486 380 draw fill;
#X msg 488 339 draw fill;
#X obj 564 158 alpha;
#X obj 564 201 colorRGB 1 1 1 1;
#X obj 730 339 t a;
#X obj 564 180 translateXYZ 0 0 -0.2;
#X obj 617 247 + 0.07;
#X msg 730 205 2 \, 4 200;
#X obj 155 537 line;
#X obj 12 339 gemhead;
#X obj 182 256 unpack f f f f f f f f f f f f;
#X floatatom 216 289 5 0 0 0 - - -, f 5;
#X msg 289 97 minvel 8;
#X msg 308 120 attack-frames 5;
#X msg 331 139 thresh 0 12;
#X obj 331 82 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 289 156 t a;
#X obj 200 315 t f f;
#X obj 232 340 expr $f1 - 0.1;
#X msg 155 377 \$1 50;
#X obj 232 362 pipe 50;
#X msg 404 207 minvel \$1;
#X floatatom 418 175 5 0 0 0 - - -, f 5;
#X obj 12 289 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 12 472 translateXYZ 0 0 1;
#X obj 12 554 circle 1;
#X obj 379 374 / 4;
#X obj 13 436 colorRGB 0.3 0.3 0 1;
#X msg 232 383 \$1 500;
#X connect 0 0 3 0;
#X connect 0 0 43 0;
#X connect 1 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 7 0;
#X connect 5 1 7 0;
#X connect 6 0 7 1;
#X connect 7 0 8 0;
#X connect 8 0 19 0;
#X connect 10 0 9 1;
#X connect 11 0 12 0;
#X connect 12 0 14 0;
#X connect 13 0 9 0;
#X connect 15 0 6 0;
#X connect 17 0 16 0;
#X connect 18 0 16 0;
#X connect 19 0 10 0;
#X connect 20 0 22 0;
#X connect 20 1 22 0;
#X connect 21 0 40 0;
#X connect 22 0 21 0;
#X connect 23 0 22 1;
#X connect 24 0 37 0;
#X connect 24 0 39 0;
#X connect 25 0 35 0;
#X connect 26 0 23 0;
#X connect 27 0 25 0;
#X connect 28 0 30 0;
#X connect 29 0 32 0;
#X connect 30 0 29 0;
#X connect 31 0 28 0;
#X connect 32 0 13 0;
#X connect 33 0 32 0;
#X connect 34 0 29 0;
#X connect 35 0 38 0;
#X connect 36 0 31 0;
#X connect 37 0 29 1;
#X connect 38 0 36 0;
#X connect 39 0 31 1;
#X connect 40 0 24 0;
#X connect 41 0 58 1;
#X connect 42 0 60 0;
#X connect 43 1 44 0;
#X connect 43 1 59 0;
#X connect 45 0 49 0;
#X connect 46 0 49 0;
#X connect 47 0 49 0;
#X connect 48 0 45 0;
#X connect 48 0 46 0;
#X connect 48 0 47 0;
#X connect 49 0 0 0;
#X connect 50 0 52 0;
#X connect 50 1 51 0;
#X connect 51 0 53 0;
#X connect 52 0 41 0;
#X connect 53 0 61 0;
#X connect 54 0 0 0;
#X connect 55 0 54 0;
#X connect 56 0 42 0;
#X connect 57 0 58 0;
#X connect 59 0 50 0;
#X connect 60 0 57 0;
#X connect 61 0 41 0;
